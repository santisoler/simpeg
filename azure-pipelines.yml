trigger:
  branches:
    include:
    - 'main'
    exclude:
    - '*no-ci*'
  tags:
    include:
    - '*'

schedules:
- cron: "0 8 * * *" # trigger cron job every day at 08:00 AM GMT
  displayName: "Scheduled nightly job"
  branches:
    include: [ "main" ]
  always: false # don't run if no changes have been applied since last sucessful run
  batch: false # dont' run if last pipeline is still in-progress

pr:
  branches:
    include:
    - '*'
    exclude:
    - '*no-ci*'


stages:

- stage: StyleChecks
  displayName: "Style Checks"
  jobs:
    - job:
      displayName: Run style checks with Black
      pool:
        vmImage: ubuntu-latest
      variables:
        python.version: '3.8'
      steps:
        - script: |
            pip install -r requirements_style.txt
          displayName: "Install dependencies to run the checks"
        - script: make black
          displayName: "Run black"

    - job:
      displayName: Run (permissive) style checks with flake8
      pool:
        vmImage: ubuntu-latest
      variables:
        python.version: '3.8'
      steps:
        - script: |
            pip install -r requirements_style.txt
          displayName: "Install dependencies to run the checks"
        - script: make flake
          displayName: "Run flake8"

    - job:
      displayName: Run style checks with flake8 (allowed to fail)
      pool:
        vmImage: ubuntu-latest
      variables:
        python.version: '3.8'
      steps:
        - script: |
            pip install -r requirements_style.txt
          displayName: "Install dependencies to run the checks"
        - script: FLAKE8_OPTS="--exit-zero" make flake-all
          displayName: "Run flake8"

- stage: Testing
  dependsOn: StyleChecks
  jobs:
    - template: ./.azure-pipelines/matrix.yml

- stage: Deploy
  dependsOn: Testing
  condition: startsWith(variables['build.sourceBranch'], 'refs/tags/')
  jobs:
    - job:
      displayName: Deploy Docs and source
      pool:
        vmImage: ubuntu-latest
      variables:
        python.version: '3.8'
      timeoutInMinutes: 240
      steps:
        - script: |
            git config --global user.name ${GH_NAME}
            git config --global user.email ${GH_EMAIL}
            git config --list | grep user.
          displayName: 'Configure git'
          env:
            GH_NAME: $(gh.name)
            GH_EMAIL: $(gh.email)

        - script: |
            wget -O Mambaforge.sh  "https://github.com/conda-forge/miniforge/releases/latest/download/Mambaforge-$(uname)-$(uname -m).sh"
            bash Mambaforge.sh -b -p "${HOME}/conda"
          displayName: Install mamba

        - script: |
            source "${HOME}/conda/etc/profile.d/conda.sh"
            source "${HOME}/conda/etc/profile.d/mamba.sh"
            cp environment_test.yml environment_test_with_pyversion.yml
            echo "  - python="$(python.version) >> environment_test_with_pyversion.yml
            mamba env create -f environment_test_with_pyversion.yml
            rm environment_test_with_pyversion.yml
            conda activate simpeg-test
            pip install pytest-azurepipelines
          displayName: Create Anaconda testing environment

        - script: |
            source "${HOME}/conda/etc/profile.d/conda.sh"
            conda activate simpeg-test
            pip install -e .
          displayName: Build package

        - script: |
            source "${HOME}/conda/etc/profile.d/conda.sh"
            conda activate simpeg-test
            python setup.py sdist
            twine upload --skip-existing dist/*
          displayName: Deploy source
          env:
            TWINE_USERNAME: $(twine.username)
            TWINE_PASSWORD: $(twine.password)

        - script: |
            source "${HOME}/conda/etc/profile.d/conda.sh"
            conda activate simpeg-test
            export KMP_WARNINGS=0
            cd docs
            make html
            cd ..
          displayName: Building documentation

        # upload documentation to simpeg-docs gh-pages on tags
        - script: |
            git clone --depth 1 https://${GH_TOKEN}@github.com/simpeg/simpeg-docs.git
            cd simpeg-docs
            git gc --prune=now
            git remote prune origin
            rm -rf *
            cp -r $BUILD_SOURCESDIRECTORY/docs/_build/html/* .
            cp $BUILD_SOURCESDIRECTORY/docs/README.md .
            touch .nojekyll
            echo "docs.simpeg.xyz" >> CNAME
            git add .
            git commit -am "Azure CI commit ref $(Build.SourceVersion)"
            git push
          displayName: Push documentation to simpeg-docs
          env:
            GH_TOKEN: $(gh.token)

- stage: Deploy_dev_docs_experimental
  dependsOn: Testing
  condition: eq(variables['Build.Reason'], 'Schedule')  # run only scheduled triggers
  jobs:
    - job:
      displayName: Deploy dev docs to simpeg-doctest (experimental)
      pool:
        vmImage: ubuntu-latest
      variables:
        python.version: '3.8'
      timeoutInMinutes: 240
      steps:
        - script: |
            git config --global user.name ${GH_NAME}
            git config --global user.email ${GH_EMAIL}
            git config --list | grep user.
          displayName: 'Configure git'
          env:
            GH_NAME: $(gh.name)
            GH_EMAIL: $(gh.email)

        - script: |
            wget -O Mambaforge.sh  "https://github.com/conda-forge/miniforge/releases/latest/download/Mambaforge-$(uname)-$(uname -m).sh"
            bash Mambaforge.sh -b -p "${HOME}/conda"
          displayName: Install mamba

        - script: |
            source "${HOME}/conda/etc/profile.d/conda.sh"
            source "${HOME}/conda/etc/profile.d/mamba.sh"
            cp environment_test.yml environment_test_with_pyversion.yml
            echo "  - python="$(python.version) >> environment_test_with_pyversion.yml
            mamba env create -f environment_test_with_pyversion.yml
            rm environment_test_with_pyversion.yml
            conda activate simpeg-test
            pip install pytest-azurepipelines
          displayName: Create Anaconda testing environment

        - script: |
            source "${HOME}/conda/etc/profile.d/conda.sh"
            conda activate simpeg-test
            pip install -e .
          displayName: Build package

        - script: |
            source "${HOME}/conda/etc/profile.d/conda.sh"
            conda activate simpeg-test
            export KMP_WARNINGS=0
            make -C docs html
          displayName: Building documentation

        # Upload dev build of the docs to gh-pages branch in simpeg/simpeg-doctest
        - script: |
            # Capture hash of last commit in simpeg
            commit=$(git rev-parse --short HEAD)
            # Clone the repo where we store the documentation
            git clone --depth 1 https://${GH_TOKEN}@github.com/simpeg/simpeg-doctest.git
            cd simpeg-doctest
            # Switch to the `dev` branch
            git switch dev
            # Clean the workspace in case of hanging untracked files
            git clean -xdf .
            # Remove all files
            shopt -s dotglob  # configure bash to include dotfiles in * globs
            export GLOBIGNORE=".git"  # ignore .git directory in glob
            git rm -rf * # remove all files
            # Move the built docs to a new dev folder
            mv $BUILD_SOURCESDIRECTORY/docs/_build/html/* -t .
            mv $BUILD_SOURCESDIRECTORY/docs/_build/html/.* -t .
            # Commit the new docs. Amend to avoid having a very large history.
            git add .
            message="Azure CI deploy dev from ${commit}"
            echo -e "\nAmmending last commit:"
            git commit --amend --reset-author -m "$message"
            # Make the push quiet just in case there is anything that could
            # leak sensitive information.
            echo -e "\nPushing changes to simpeg/simpeg-doctest."
            git push -fq origin dev 2>&1 >/dev/null
            echo -e "\nFinished uploading generated files."
          displayName: Push documentation to simpeg-doctest (dev branch)
          env:
            GH_TOKEN: $(gh.token)

- stage: Deploy_release_docs_experimental
  dependsOn: Testing
  condition: startsWith(variables['build.sourceBranch'], 'refs/tags/')
  jobs:
    - job:
      displayName: Deploy release docs to simpeg-doctest (experimental)
      pool:
        vmImage: ubuntu-latest
      variables:
        python.version: '3.8'
      timeoutInMinutes: 240
      steps:
        - script: |
            git config --global user.name ${GH_NAME}
            git config --global user.email ${GH_EMAIL}
            git config --list | grep user.
          displayName: 'Configure git'
          env:
            GH_NAME: $(gh.name)
            GH_EMAIL: $(gh.email)

        - script: |
            wget -O Mambaforge.sh  "https://github.com/conda-forge/miniforge/releases/latest/download/Mambaforge-$(uname)-$(uname -m).sh"
            bash Mambaforge.sh -b -p "${HOME}/conda"
          displayName: Install mamba

        - script: |
            source "${HOME}/conda/etc/profile.d/conda.sh"
            source "${HOME}/conda/etc/profile.d/mamba.sh"
            cp environment_test.yml environment_test_with_pyversion.yml
            echo "  - python="$(python.version) >> environment_test_with_pyversion.yml
            mamba env create -f environment_test_with_pyversion.yml
            rm environment_test_with_pyversion.yml
            conda activate simpeg-test
            pip install pytest-azurepipelines
          displayName: Create Anaconda testing environment

        - script: |
            source "${HOME}/conda/etc/profile.d/conda.sh"
            conda activate simpeg-test
            pip install -e .
          displayName: Build package

        - script: |
            source "${HOME}/conda/etc/profile.d/conda.sh"
            conda activate simpeg-test
            export KMP_WARNINGS=0
            make -C docs html
          displayName: Building documentation

        # Upload dev build of the docs to gh-pages branch in simpeg/simpeg-doctest
        - script: |
            # Capture version
            # TODO: we should be able to get the version from the
            # build.sourceBranch variable
            version=$(git tag --points-at HEAD)
            if [ -n "$version" ]; then
              echo "Version could not be obtained from tag. Exiting."
              exit 1
            fi
            # Capture hash of last commit in simpeg
            commit=$(git rev-parse --short HEAD)
            # Clone the repo where we store the documentation
            git clone --depth 1 https://${GH_TOKEN}@github.com/simpeg/simpeg-doctest.git
            cd simpeg-doctest
            # Move the built docs to a new dev folder
            mv $BUILD_SOURCESDIRECTORY/docs/_build/html "$version"
            cp $BUILD_SOURCESDIRECTORY/docs/README.md .
            # Add .nojekyll if missing
            touch .nojekyll
            # Update latest symlink
            rm -f latest
            ln -s "$version" latest
            # Commit the new docs.
            git add "$version" README.md .nojekyll latest
            message="Azure CI deploy ${version} from ${commit}"
            echo -e "\nMaking a new commit:"
            git commit -m "$message"
            # Make the push quiet just in case there is anything that could
            # leak sensitive information.
            echo -e "\nPushing changes to simpeg/simpeg-doctest."
            git push -fq origin gh-pages 2>&1 >/dev/null
            echo -e "\nFinished uploading generated files."
          displayName: Push documentation to simpeg-doctest
          env:
            GH_TOKEN: $(gh.token)
